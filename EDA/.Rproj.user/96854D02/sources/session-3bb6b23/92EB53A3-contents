---
title: "FinalProject_EDA"
author: "Joshua Chadwick"
date: "2024-11-09"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(dplyr)
library(ggplot2)
```

# Exploring our Social Media Survey Data
```{r}
data <- read.csv("../inputs/train.csv")
data <- data %>%
  drop_na() # Removing the blank lines in the data.
```

### Transforming our Categorical Data into Numerical Data
----------------
We will be using "One-Hot Encoding" for this transformation which separates categorical data into its own columns and gives a binary classification (yes or no) for each row.

**Mutating the Gender variable**:
```{r}
data <- data %>%
  mutate(dummy = 1) %>%
  pivot_wider(names_from = Gender, values_from = dummy, values_fill = 0) # Fill spaces without the given gender category with 0.
```

**Mutating the Platform variable**:
```{r}
data <- data %>%
  mutate(dummy = 1) %>%
  pivot_wider(names_from = Platform, values_from = dummy, values_fill = 0) # Fill spaces without the given gender category with 0.
```

**Mutating the Dominant_Emotion variable**:
```{r}
data <- data %>%
  mutate(dummy = 1) %>%
  pivot_wider(names_from = Dominant_Emotion, values_from = dummy, values_fill = 0) # Fill spaces without the given gender category with 0.
```

### Export our cleaned and processed data
```{r}
write.csv(data, "cleaned_train.csv", row.names=FALSE)
```

# Exploring The Trends
```{r}
age_group_counts <- data %>%
  group_by(Age) %>%
  summarise(num_entries = n())

print(age_group_counts)

happiness_to_age_mapping <- data %>%
  filter(Happiness == 1) %>%
  group_by(Age) %>%
  summarise(happiness_count = n()) %>% # Sum up the rows that are happy.
  arrange(desc(happiness_count))
  

happiness_to_age_mapping %>%
  slice(1:10) %>% # Getting the top 10 results
  ggplot(aes(x = reorder(Age, happiness_count), y = happiness_count)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  geom_text(aes(label = happiness_count), vjust = -0.2) +
  labs(title = "Top 10 Age Groups with Highest Number of Happy Users",
       x = "Age",
       y = "Anxious Count")

anxiety_to_age_mapping <- data %>%
  filter(Anxiety == 1) %>%
  group_by(Age) %>%
  summarise(anxiety_count = n()) %>% # Sum up the rows that are happy.
  arrange(desc(anxiety_count))

anxiety_to_age_mapping %>%
  slice(1:10) %>% # Getting the top 10 results
  ggplot(aes(x = reorder(Age, anxiety_count), y = anxiety_count)) +
  geom_bar(stat = "identity", fill = "black") +
  theme_minimal() +                                        # Base theme
  theme(
    panel.background = element_rect(fill = "#E2DFD2", color = NA),  # Plot area background
    plot.background = element_rect(fill = "#E2DFD2", color = NA)    # Entire plot background
  ) +
  geom_text(aes(label = anxiety_count), vjust = -0.2) +
  labs(title = "Top 10 Age Groups with Highest Number of Anxious Users",
       x = "Age",
       y = "Anxious Count")
```

### Finding the ratio of each observed level
-----------
```{r}
print(happiness_to_age_mapping)
print(anxiety_to_age_mapping)
total_age_counts <- data %>%
  group_by(Age) %>%
  summarise(total_entries = n())

category_percentages <- left_join(total_age_counts, happiness_to_age_mapping, by = "Age")
category_percentages <- left_join(category_percentages, anxiety_to_age_mapping, by = "Age") # Now add the anxiety counts.
category_percentages <- category_percentages %>%
  mutate(happiness_count = ifelse(is.na(happiness_count), 0, happiness_count)) %>%
  mutate(anxiety_count = ifelse(is.na(anxiety_count), 0, anxiety_count)) %>%
  mutate(happy_percentage = happiness_count / total_entries) %>%
  mutate(anxious_percentage = anxiety_count / total_entries)

print(category_percentages)
```